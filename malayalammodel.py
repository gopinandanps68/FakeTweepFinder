# -*- coding: utf-8 -*-
"""malayalammodel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pSIuThIcs2H1S0odQ8qiil7-oNwpUAZ2
"""

!pip install fasttext

!pip install indic-nlp-library

!rm -f cc.ml.300.bin cc.ml.300.bin.gz

!wget -O cc.ml.300.bin.gz https://dl.fbaipublicfiles.com/fasttext/vectors-crawl/cc.ml.300.bin.gz && gunzip cc.ml.300.bin.gz

import pandas as pd
import re
import fasttext
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
import joblib
from indicnlp.tokenize import indic_tokenize

# Load dataset
df = pd.read_excel('malayalam_tweet_dataset.xlsx')

# Function to clean text
def clean_text(text):
    text = re.sub(r'http\S+|www\S+', '', text)  # Remove URLs
    text = re.sub(r'@\w+', '', text)           # Remove mentions
    text = re.sub(r'#\w+', '', text)           # Remove hashtags
    text = re.sub(r'[^\u0D00-\u0D7F\s]', '', text)  # Keep only Malayalam characters
    return text.strip()

# Preprocess text without transliteration
def preprocess(text):
    text = clean_text(text)
    tokens = indic_tokenize.trivial_tokenize(text, lang='mal')
    tokens = [token for token in tokens if len(token) > 1]
    return " ".join(tokens)

# Apply preprocessing
df['cleaned_text'] = df['text'].apply(preprocess)

# Load FastText model only once
ft_model = fasttext.load_model("cc.ml.300.bin")  # Ensure this file is downloaded locally

# Optimized function to get FastText embeddings
def get_embedding(text):
    words = text.split()
    word_vectors = [ft_model.get_word_vector(word) for word in words if word in ft_model]
    if not word_vectors:
        return np.zeros(300)
    return np.mean(word_vectors, axis=0)

# Convert text to embeddings and store as NumPy array
df['embedding'] = df['cleaned_text'].apply(get_embedding)
X = np.vstack(df['embedding'].values)  # Faster than list conversion
y = df['target'].values  # Convert to NumPy array for speed

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Optimized Random Forest Classifier
rf_model = RandomForestClassifier(n_estimators=100, max_depth=15, min_samples_split=5, random_state=42)
rf_model.fit(X_train, y_train)

# Predict on test set
y_pred = rf_model.predict(X_test)

# Evaluate the model
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# Save the trained model
joblib.dump(rf_model, 'bot_detection_rf_model_malayalam.pkl')

import fasttext
import numpy as np
import joblib

# Load trained model
rf_model = joblib.load('bot_detection_rf_model_malayalam.pkl')

# Load FastText Malayalam model
ft_model = fasttext.load_model("cc.ml.300.bin")  # Ensure this file is downloaded locally

# Function to get FastText embeddings
def get_embedding(text):
    words = text.split()
    word_vectors = [ft_model.get_word_vector(word) for word in words if word in ft_model]
    if not word_vectors:
        return np.zeros(300)  # Return a zero vector if no valid words
    return np.mean(word_vectors, axis=0)

# Function to predict on a single Malayalam text
def predict_text(text):
    embedding = get_embedding(text).reshape(1, -1)  # Reshape to match model input
    prediction = rf_model.predict(embedding)[0]  # Get prediction (0 = Bot, 1 = Human)
    return "Human Tweet" if prediction == 1 else "Bot Tweet"

sample_text = "പോടാ പട്ടി"  # Example Malayalam text
print(f"Prediction: {predict_text(sample_text)}")